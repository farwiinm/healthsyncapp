
name: CI/CD Pipeline for Microservices

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  ECR_REGION: us-east-2
  ECR_REPOSITORY_AGGREGATOR: 640168457618.dkr.ecr.us-east-2.amazonaws.com/healthsync/aggregator-service
  ECR_REPOSITORY_APPOINTMENT: 640168457618.dkr.ecr.us-east-2.amazonaws.com/healthsync/appointment-scheduling-service
  ECR_REPOSITORY_NOTIFICATION: 640168457618.dkr.ecr.us-east-2.amazonaws.com/healthsync/notification-service
  ECR_REPOSITORY_PATIENT: 640168457618.dkr.ecr.us-east-2.amazonaws.com/healthsync/patient-record-service

jobs:
  build-and-push:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout code
      - name: Checkout Code
        uses: actions/checkout@v3

      # Step 2: Configure AWS Credentials
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.ECR_REGION }}

      # Step 3: Log in to Amazon ECR
      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      # Step 4: Build and Push Aggregator Service Docker Image
      - name: Build and Push Aggregator Service
        run: |
          docker build -t ${{ env.ECR_REPOSITORY_AGGREGATOR }}:latest ./microservices/aggregator-service
          docker push ${{ env.ECR_REPOSITORY_AGGREGATOR }}:latest

      # Step 5: Build and Push Appointment Scheduling Service Docker Image
      - name: Build and Push Appointment Scheduling Service
        run: |
          docker build -t ${{ env.ECR_REPOSITORY_APPOINTMENT }}:latest ./microservices/appointment-scheduling-service
          docker push ${{ env.ECR_REPOSITORY_APPOINTMENT }}:latest

      # Step 6: Build and Push Notification Service Docker Image
      - name: Build and Push Notification Service
        run: |
          docker build -t ${{ env.ECR_REPOSITORY_NOTIFICATION }}:latest ./microservices/notification-service
          docker push ${{ env.ECR_REPOSITORY_NOTIFICATION }}:latest

      # Step 7: Build and Push Patient Record Service Docker Image
      - name: Build and Push Patient Record Service
        run: |
          docker build -t ${{ env.ECR_REPOSITORY_PATIENT }}:latest ./microservices/patient-record-service
          docker push ${{ env.ECR_REPOSITORY_PATIENT }}:latest

  deploy:
    name: Deploy to Kubernetes
    runs-on: self-hosted
    steps:
      # Step 1: Checkout code
      - name: Checkout Code
        uses: actions/checkout@v3

      # Step 2: Set up kubectl
      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      # Step 3: Set up kubeconfig (Windows-Compatible)
      - name: Set up kubeconfig
        run: |
          echo "${{ secrets.KUBECONFIG_FILE }}" > kubeconfig
          if ($Env:OS -eq "Windows_NT") {
            $Env:KUBECONFIG = "$PWD\kubeconfig"
          } else {
            export KUBECONFIG=$PWD/kubeconfig
          }

      # Step 4: Validate kubectl connectivity
      - name: Validate kubectl connectivity
        run: |
          kubectl cluster-info
          kubectl get nodes

      # Step 5: Deploy Aggregator CronJob
      - name: Deploy Aggregator CronJob
        run: |
          kubectl apply -f ./kubernetes/aggregator-cronjob.yaml --validate=false
          kubectl get cronjob/aggregator-service

      # Step 6: Deploy Appointment Scheduling Service
      - name: Deploy Appointment Scheduling Service
        run: |
          kubectl apply -f ./kubernetes/appointment-scheduling-service.yaml
          kubectl rollout status deployment/appointment-scheduling-service

      # Step 7: Deploy Notification Service
      - name: Deploy Notification Service
        run: |
          kubectl apply -f ./kubernetes/notification-service.yaml
          kubectl rollout status deployment/notification-service

      # Step 8: Deploy Patient Record Service
      - name: Deploy Patient Record Service
        run: |
          kubectl apply -f ./kubernetes/patient-record-service.yaml
          kubectl rollout status deployment/patient-record-service

      # Step 9: Wait for 12 Hours
      - name: Wait for Services to Run
        run: sleep 43200 # 12 hours in seconds
