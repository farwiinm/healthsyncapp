name: CI/CD Pipeline for Microservices

on:
  push:
    branches:
      - main

jobs:
  build-and-push:
    name: Build and Push Docker Images
    runs-on: ubuntu-22.04

    steps:
      # Step 1: Checkout code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Configure AWS Credentials
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCES_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2

      # Step 3: Log in to Amazon ECR
      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      # Step 4: Build and Push Docker Images for each microservice
      - name: Build and Push Aggregator CronJob
        run: |
          docker build -t ${{ secrets.ECR_REPOSITORY_URI_AGGREGATOR }}:latest .
          docker push ${{ secrets.ECR_REPOSITORY_URI_AGGREGATOR }}:latest

      - name: Build and Push Appointment Microservice
        run: |
          docker build -t ${{ secrets.ECR_REPOSITORY_URI_APPOINTMENT }}:latest ./microservices/appointment-scheduling-service
          docker push ${{ secrets.ECR_REPOSITORY_URI_APPOINTMENT }}:latest

      - name: Build and Push Notification Microservice
        run: |
          docker build -t ${{ secrets.ECR_REPOSITORY_URI_NOTIFICATION }}:latest ./microservices/notification-service
          docker push ${{ secrets.ECR_REPOSITORY_URI_NOTIFICATION }}:latest

      - name: Build and Push Patient Microservice
        run: |
          docker build -t ${{ secrets.ECR_REPOSITORY_URI_PATIENT }}:latest ./microservices/patient-record-service
          docker push ${{ secrets.ECR_REPOSITORY_URI_PATIENT }}:latest

  test:
    name: Run Tests
    runs-on: ubuntu-22.04
    needs: build-and-push

    steps:
      # Step 1: Checkout code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Install dependencies and run tests for each microservice
      - name: Run Tests for Aggregator CronJob
        run: |
          cd ./microservices/aggregator-service
          pip install -r requirements.txt || true
          pytest tests || true

      - name: Run Tests for Appointment Microservice
        run: |
          cd ./microservices/appointment-scheduling-service
          pip install -r requirements.txt || true
          pytest tests || true

      - name: Run Tests for Notification Microservice
        run: |
          cd ./microservices/notification-service
          pip install -r requirements.txt || true
          pytest tests || true

      - name: Run Tests for Patient Microservice
        run: |
          cd ./microservices/patient-record-service
          pip install -r requirements.txt || true
          pytest tests || true

  deploy:
    name: Deploy to Kubernetes
    runs-on: ubuntu-22.04
    needs: test

    steps:
      # Step 1: Checkout code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Set up kubectl
      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      # Step 3: Update ConfigMap for Aggregator Image
      - name: Update Aggregator ConfigMap
        run: |
          kubectl create configmap aggregator-config \
            --from-literal=image-uri=${{ secrets.ECR_REPOSITORY_URI_AGGREGATOR }} --dry-run=client -o yaml | kubectl apply -f -

      # Step 4: Apply Kubernetes manifests for each microservice
      - name: Deploy Aggregator CronJob
        run: |
          kubectl apply -f ./kubernetes/aggregator-cronjob.yaml
          kubectl get cronjob/aggregator-service

      - name: Deploy Appointment Microservice
        run: |
          kubectl apply -f ./kubernetes/appointment-scheduling-service.yaml
          kubectl rollout status deployment/appointment-scheduling-service

      - name: Deploy Notification Microservice
        run: |
          kubectl apply -f ./kubernetes/notification-service.yaml
          kubectl rollout status deployment/notification-service

      - name: Deploy Patient Microservice
        run: |
          kubectl apply -f ./kubernetes/patient-record-service.yaml
          kubectl rollout status deployment/patient-record-service
